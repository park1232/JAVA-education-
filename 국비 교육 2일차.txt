System.out.println -> Class 파일인 System 안에 out 안에 println 메소드를 가지고 온것

변수(Variable) : (어떤 값) = (데이터) 를 저장할 수 있는 공간 ex:상자 
장점 -> 가독성이 좋아지고 재사용성 증가로 인한 코드량 감소 유지보수 용이

print 출력 ln 줄바꿈 println 출력하면서 값을 줄바꿈

선언 : Stack 이라는 영역에 공간이 만들어 지는 것 

변수의 선언 : 변수가 Stack에 만들어 지는 것
ex : 자료형(변수타입지정) 변수명(변수명지정);(마침)

자료형 : 내가 집어넣을 공간의 크기를 지정해주는 것 ex: int(4byte) char(2byte) boolean(1byte)
자료형종류 : 기본자료형, 참조자료형
참조자료형 : String(참조형), 그외 무수히 많음
기본자료형 : 원시타입, 값을 지정할 수 있는 값 ex:10, true 등등
기본자료형 type : 자료형 -> 논리타입, 문자타입, 숫자타입
논리형 -> boolean(1byte)      
문자형 -> 문자타입 char(2byte)
숫자형 -> 정수타입 byte(1byte), short(2byte), int(4byte), long(8byte)
            -> 실수타입 float(4byte), double(8byte) 

정수의 기본형은 int, 실수의 기본형은 double

변수명 : 이름을 지정해주는 것

메모리 영역 : Stack, Heap, static

참조자료형은 주소값 을 갖고있다★

Stack : Stack은 컴퓨터가 관여 할 수 있는데 Stack에 변수를 저장하면 Heap영역에 있는 주소를 Stack영역에 참조한다

Heap : heap 영역은 주소값을 저장하고있음

모든 Class는 참조자료형이다
 
8bit = 1byte

char는 음수가 없다 0~65535(유니코드문자) 

byte는 -128~127 

자료형의 기본값은 숫자는 다 0, char는 '/u0000', boolean는 false, long은 0L, float은 0.0f, double 0.0또는0.0d

변수 명명 규칙 : 1. 대소문자가 구분되며 길이 제한 x
                           2.예약어를 사용하면 안된다. ex:true, final, String 등
                           3.숫자로 시작하면 안 된다.
                           4.특수문자는 '_'와 '$'만을 허용한다. ex: '$'는 내부 클래스에서 사용,  '_'사용 시 컴파일 에러는 없지만 관례 
                              상 사용하지 않은 것이 좋다
                           5.여러 단어 이름은 단어의 첫 글자를 대문자로 한다. 단 첫 시작 글자는 소문자로 하는 것이 관례이다.

값 대입 : 생성한 변수(저장 공간)에 값을 대입하는 것 ex: int age; 
                                                                                          age = 10;
                                                                                          age = 20;
*대입 연산자를 기준으로 왼쪽은 공간 오른쪽은 값    ex) 공간(변수) = 값(데이터)
ex) int max;
     max = age;                 는 max에 age의 데이터 값인 20이 대입이된다
*변수는 한 개의 데이터만 보관, 마지막에 대입한 값만 보관, = -> 대입 연산자

리터럴 : 변수에 대입되는 값 자체 ex: int age = 10; 에서 10

변수의 초기화 : 변수를 사용하기 전에 처음으로 값을 저장하는 것 -> 지역변수(메소드 안 변수)는 반드시 초기화 해야함
                          선언 후 초기화  
                          int age;
                          age = 100;
                         선언과 동시에 초기화
                          int age = 100;

클래스 안에는 메소드가 들어감 메소드는 무언가를 기능, 동작 하는 역할을 한다
클래스도 동작을 시키려면 메소드 안에 클래스를 생성한다
메소드 형식 ex) public void 메소드이름()

// 한 줄 주석

/*               */ 여러 줄 주석
1. 주석 단축키 -> ctrl + shift + /              ex) 내가 주석 처리 하고 싶은 부분을 블록 처리한 뒤 명령어 처리 -> 다시 풀 수 없 
                                                                       음 수동으로 해야함
2. ctrl + /                                                   ex) 내가 주석 처리 하고 싶은 부분을 블록 처리한 뒤 명령어 처리 -> 한 줄 주석임 
                                                                        다시 풀 수 있음
3. ctrl + shift + c                                       ex) 내가 주석 처리 하고 싶은 부분을 블록 처리한 뒤 명령어 처리  -> 한 줄 주석임 
                                                                        다시 풀 수 있음

main 메소드는 실행 메소드다 (메인 메소드가 있어야지만 프로그램이 동작을 할 수가 있다)
메인 메소드가 여러개면 실행이 느려지기 떄문에 패키지로 분리시킴 
메인 메소드 형식 public static void main(String[] args)

다른 클래스 사용시 ->  A_Variable av = new A_Variable();  라고 적으면 불가 A_Variable의 위치를 지정해줘야함
                                     ex1) com.kh.variable.A_Variable av = new com.kh.variable.A_Variable();
                                     ex2) import로 가져오기  import com.kh.variable.A_Variable;

import 단축키 ctrl + shift + o 

상수 : 컴퓨터 에서는 한 번만 저장(기록)할 수 있는 메모리 의미
상수 -> final          ex) final int AGE;                  (상수는 변수를 대문자로 사용하고 단어가 여러개일시 단어마다 '_'를 넣는다 
                                                                           ex AGE_OF_VAMPIRE)

문자열 : 컴퓨터에서 단어나 문장을 문자열이라고 표현 ""로 묶여 있으면 문자열로 인식 java에서는 String 객체를 이용하여 
              저장         ex1) String str = "기차" + 123 + 45 + "출발";  = 기차12345출발
                              ex2) String str = 123 + 45 + "기차" + "출발"; = 168기차출발 
                              ex3) String str = "기차" + (123 + 45) + "출발";  = 기차168출발
문자열이 먼저 나오고 그 다음에 나온 자료형 들은 문자열의 역할을 한다 -> ex1
다른 자료형이 먼저 나오고 그 다음에 문자열이 나오면 다른 자료형은 문자열의 역할을 안한다 -> ex2
문자열이 먼저 나오고 그 다음에 다른 자료형이 나왔지만 다른 자료형끼리 ( ) 가 있으면  ( ) 우선 순위를 두고 출력 됨 -> 
ex3

형변환(Casting) : 값(Data)의 자료형을 바꾸는 것 (boolean 제외)
(같은 종류 자료형만 대입 가능, 같은 종류 자료형만 계산 가능, 계산의 결과도 같은 종류의 값이 나와야 함) -> 기본 컴퓨터 원칙          이 원칙이 지켜지지 않을시 형 변환을 한다
자동 형변환 : 컴파일러가 자동으로 값의 범위가 작은 자료형을 값의 범위가 큰 자료형으로 변환
byte -> short, char -> int -> long -> float -> double             ex) int a = 12;
기본적으로 실수형이 정수형보다 크기떄문에 자동 형변환이됨  double d = 3.3;
                                                                                                      double result = a + d;        -> 12+3.3 -> 12.0+3.3 -> 15.3
단 byte와 short 자료형 값의 계산 결과는 무조건 int로 처리한다.
강제 형변환 : 값의 범위가 큰 자료형을 값의 범위가 작은 자료형으로 변환, 강제 형변환 시 데이터 손실이 발생할 수 있음
                      -> 데이터의 변형, 손실을 감수하고 강제 변환                 ex) double temp;
                                                                                                                      int name = (int)temp;
데이터 손실 -> int 00000000,00000000,00000001,00100010
                      byte (앞의            자료             손실),00100010

출력 메소드 : System.out.print()        -> ( ) 안의 변수, 문자, 숫자, 논리 값을 모니터에 출력해주는 메소드
                      System.out,println()     -> ( ) print문과 동일하게 출력은 해주지만 출력 후 줄 바꿈
                      System.out,printf()       -> 정해져 있는 형식에 맞춰서 그 형식에 맞는 값(변수)를 줄바꿈 하지 않고 출력
                      printf -> %d 정수형, %c 문자, %s 문자열, %b 논리형
                      printf       ex) String str1 = "안녕하세요"; 
                                           System.out.printf("%s, 박규민입니다.", str1);          -> 안녕하세요, 박규민입니다.
                                      ex) // String str1 = "안녕하세요";
                                                String str2 = "반갑습니다"
		                                System.out.printf("%s? %s. 친하게 지내요.", str1, str2);   -> 안녕하세요? 반갑습니다. 친하게 
                                                지내요.

